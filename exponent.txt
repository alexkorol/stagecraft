# StageCraft Creator - Modern Web-Based Remake

## Core Features & Goals
1. Visual Rule-Based Programming
   - Before/After state visualization for rules
   - Simple drag-and-drop interface
   - No traditional coding required
   - Immediate visual feedback

2. Sprite Editor
   - Built-in pixel art editor (clicking and dragging the 'palette' object button onto an object opens up the sprite editor)
   - Support for transparency
   - pencil, flood fill, lasso, line, square, circle, square selection, circle selection tools
   - text tool
   - Multiple animation frames
   - Preview animation in editor
   - Different sprite sizes (16x16, 32x32, 64x64)

3. Stage/Grid System
   - Drag the 'star' button onto the stage to place a default star object.
   - Flexible stage size (adjustable grid)
   - Multiple z-depth layers (background, main, foreground)
   - Grid overlay toggle
   - Pan/zoom controls

4. Rule System
   - Visual rule editor (clicking and dragging the 'magic wand' rule button onto an object opens a separate window)
   - Rule editing window has an adjustable sprite and adjascent cells view, edges have arrows that can be dragged to adjust the size of the rule in cells.
   - Trigger types:
     * Always (continuous)
     * Key press
     * Collision
     * Proximity
     * Mouse click
   - Actions:
     * Move (8 directions)
     * Change appearance
     * Change layer
     * Create/destroy objects
     * Play sound
   - example use: drag the wand on the bird object. window opens with two birds displayed like this [@] -> [@]. user drags the resizer handles near the second bird to the right and an empty cell appears: [@._] -> [@._]. Now the player drags the second bird into the empty space: [@._]-> [_.@] and clicks apply. This creates a rule for the bird to constantly move a cell to the right each tick. Now when the simulation is played with the 'play' button the bird rapidly moved to the right cell by cell. 

5. Character/Object System
   - Library of created characters
   - Multiple instances of same character
   - Properties:
     * Position (x, y, z)
     * Current appearance
     * Custom variables (score, health, etc.)

6. Simulation Controls
   - Play/Pause
   - Step-by-step execution
   - Speed control
   - Reset

## Project Structure
```
/src
  /components
    - Stage.js           # Main grid/playfield
    - SpriteEditor.js    # Pixel art editor
    - RuleEditor.js      # Visual rule creation
    - CharacterList.js   # Character management
    - Controls.js        # Simulation controls
    - LayerControls.js   # Z-depth management
  
  /utils
    - SimulationEngine.js  # Rule execution
    - CollisionSystem.js   # Object interaction
    - SpriteManager.js     # Sprite/animation handling
    - StorageManager.js    # Save/load projects
```

## Implementation Priority
1. Basic Stage & Grid
   - Implement flexible grid system
   - Add layer support
   - Basic character placement

2. Sprite Editor
   - Pixel editing tools
   - Transparency support
   - Animation frames
   - Preview window

3. Rule System
   - Visual before/after editor
   - Basic movement rules
   - Trigger conditions
   - Rule testing/preview

4. Character System
   - Character creation
   - Instance management
   - Basic properties

5. Simulation Engine
   - Rule execution
   - Collision detection
   - Performance optimization

6. UI/UX Improvements
   - Intuitive controls
   - Clear visual feedback
   - Helpful tooltips
   - Basic tutorial

## Technical Requirements
- React for UI components
- Canvas for sprite editor
- Local storage for saving projects
- No backend required initially

## Example Project: Simple Game
1. Create player character with walk animation
2. Add movement rules (arrow keys)
3. Create collectible items
4. Add collision rules for collection
5. Add score display
6. Create win condition

This specification focuses on the core features that made Stagecast Creator unique and educational, without getting bogged down in unnecessary complexity. Each component should be simple, focused, and contribute to the main goal of teaching programming concepts through visual rules.
